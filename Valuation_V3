import pandas as pd
import numpy as np
import mysql.connector
import warnings
import time

start_time = time.time()
warnings.filterwarnings('ignore')

config = {
    'host': 'los-test-db.mysql.database.azure.com',
    'user': 'csladmin@los-test-db',
    'password': 'csLabs$2019',
    'database': 'quandl'}


class db_connection():

    def __init__(self, config):
        self.config = config

    def connect(self):
        self.db = mysql.connector.connect(**self.config)
        if self.db:
            print("Connection Successful")
        else:
            print("Connection Failed")
        self.cursor = self.db.cursor(dictionary=True)


db = db_connection(config)

tick = 'ADBE'
growth_rates = [0.044, 0.041, 0.028, 0.043, 0.055, 0.040, -0.023]

def call_table(cursor, table, tick, dropped=True):
    cursor.execute(f"SELECT * FROM {table} WHERE ticker = '{tick}'")
    df = pd.DataFrame(cursor.fetchall())
    if dropped:
        df = df.drop('Index', axis='columns')
    return df.iloc[-7:, ].reset_index(drop=True)

def price(cursor,table,dropped =True):
    cursor.execute(f"SELECT ID,calendardate,unadj_close FROM {table} WHERE calendardate between '2014-01-01' and '2020-12-31'")
    df1 = pd.DataFrame(cursor.fetchall())
    if dropped:
        df1 = df1.drop('ID',axis='columns')
    return df1

def price_call(cursor, table, tick, dropped=True):
    cursor.execute(f"SELECT * FROM {table} WHERE ticker = '{tick}'")
    df = pd.DataFrame(cursor.fetchall())
    if dropped:
        df = df.drop('Index', axis='columns')
    return df

db.connect()
bs, cf = call_table(db.cursor, 'mry_balance_sheet', tick), call_table(db.cursor, 'mry_cash_flow', tick)
incs, metrics = call_table(db.cursor, 'mry_income_statement', tick), call_table(db.cursor, 'mry_metrics', tick)
bs_extra, cf_extra = round(call_table(db.cursor, 'bs_new', tick, True)), call_table(db.cursor, 'cf_new', tick, True)
sp500_price = price(db.cursor, 'sp500_price')
price_avg,price_max = price_call(db.cursor, 'sep_avg', tick), price_call(db.cursor,'sep_max',tick)


#Time For Fetching Data from SQL DB
seconds = time.time() - start_time
print('Time Taken for Fetching Data:', time.strftime("%H:%M:%S",time.gmtime(seconds)))


items = bs.merge(incs, how='left', on=['ticker', 'calendardate', 'reportperiod', 'dimension', 'datekey'])
items = items.merge(metrics, how='left', on=['ticker', 'calendardate', 'reportperiod', 'dimension', 'datekey'])
items = items.merge(cf, how='left', on=['ticker', 'calendardate', 'reportperiod', 'dimension', 'datekey'])
extras = bs_extra.merge(cf_extra, how='left', on=['ticker', 'calendardate'])
items = items.merge(extras, how='left', on=['ticker', 'calendardate'])

# Divide Datasets
divider = 1000000

cols_req = ['cor', 'consolinc', 'ebit', 'ebitusd','gp', 'intexp', 'netinc', 'netinccmn', 'netinccmnusd', 'netincdis',
            'netincnci', 'opex', 'opinc', 'prefdivis','revenue', 'revenueusd', 'rnd', 'sgna', 'shareswa', 'shareswadil',
            'taxexp', 'sharebas', 'assetsavg', 'ebitda','ebitdausd', 'ebt', 'equityavg', 'ev', 'fcf', 'invcap',
            'invcapavg', 'marketcap', 'tangibles', 'workingcapital']

cols = list(bs.iloc[:,5:].columns) + list(cf.iloc[:,5:].columns) + cols_req
items[cols] = items[cols] / divider


# Additional BS Line items to be calculated
#Pre-requisite-(Reverse order of items)
items.sort_values(by=['calendardate'], ascending=False,inplace=True)
items.reset_index(inplace=True, drop=True)

####Assets####
#Initially loaded in decending order, as per calendardate
bs_add = pd.DataFrame()
bs_add['calendardate'] = bs['calendardate']
bs_add.sort_values(by=['calendardate'], ascending=False,inplace=True)
bs_add.reset_index(inplace=True,drop=True)

bs_add['ppegross_abs_chng'] = None
for i in range(len(items.calendardate)-1):
    bs_add['ppegross_abs_chng'].iloc[i] = items.iloc[i,-5]-items.iloc[i+1,-5]
    bs_add['ppegross_abs_chng'] = bs_add['ppegross_abs_chng'].fillna(0)

###Reverse order of bs_add and items before proceeding###
items.sort_values(by=['calendardate'], ascending=True,inplace=True)
items.reset_index(inplace=True,drop=True)
bs_add.sort_values(by=['calendardate'], ascending=True,inplace=True)
bs_add.reset_index(inplace=True,drop=True)

####Assets Cont.####
bs_add['other_curr_assets'] = items['assetsc']-items['cashneq']-items['receivables']-items['inventory']-items['investmentsc']
bs_add['disposals'] = (bs_add['ppegross_abs_chng']+items['capex'])
bs_add['depr_&_amor_accum'] = -((items['ppegross'].astype(float))-items['ppnenet']+items['oper_lease_asset'].fillna(0))
bs_add['other_assets'] = items['assets']-items['intangibles']-items['investmentsnc']-items['ppnenet']-items['assetsc']

####Liabilities####
bs_add['other_curr_liab'] = items['liabilitiesc']-items['payables']-items['debtc']-items['deferredrev']
bs_add['debt'] = items['debtnc']-(items['oper_lease_liab'].fillna(0))
bs_add['other_liab'] = items['liabilitiesnc']-items['taxliabilities']-items['debtnc']

####Equity####
bs_add['convr_debt_&_non_cont_int'] = (items['assets']-items['liabilities'])-items['equity']  ## Check
bs_add['capital_surplus'] = items['equity']-(items['retearn']+items['accoci'])-bs_add['convr_debt_&_non_cont_int']


# Additional CF Line items to be calculated
#Pre-requisite-(Reverse order of items & bs_add)
items.sort_values(by=['calendardate'], ascending=False, inplace=True)
items.reset_index(inplace=True, drop=True)
bs_add.sort_values(by=['calendardate'], ascending=False, inplace=True)
bs_add.reset_index(inplace=True, drop=True)

###Line_Items###
#Initially loaded in decending order, as per calendardate
cf_add = pd.DataFrame()
cf_add['calendardate'] = bs['calendardate']
cf_add.sort_values(by=['calendardate'], ascending=False,inplace=True)
cf_add.reset_index(inplace=True,drop=True)

cf_add['inc_curr_assets'] = None
for i in range(len(items.calendardate)-1):
    cf_add['inc_curr_assets'].iloc[i] = (items.iloc[i+1,29]+items.iloc[i+1,20]+bs_add.iloc[i+1,2])-(items.iloc[i,29]+items.iloc[i,20]+bs_add.iloc[i,2])
    cf_add['inc_curr_assets'] = cf_add['inc_curr_assets'].fillna(0)

cf_add['inc_curr_liab'] = None
for i in range(len(items.calendardate)-1):
    #print(items.iloc[i,27])
    cf_add['inc_curr_liab'].iloc[i] = (items.iloc[i,27]+items.iloc[i,15]+bs_add.iloc[i,6])-(items.iloc[i+1,27]+items.iloc[i+1,15]+bs_add.iloc[i+1,6])
    cf_add['inc_curr_liab'] = cf_add['inc_curr_liab'].fillna(0)

###Reverse order of cf_add, bs_add & items before proceeding###
items.sort_values(by=['calendardate'], ascending=True,inplace=True)
items.reset_index(inplace=True,drop=True)
bs_add.sort_values(by=['calendardate'], ascending=True,inplace=True)
bs_add.reset_index(inplace=True,drop=True)
cf_add.sort_values(by=['calendardate'], ascending=True,inplace=True)
cf_add.reset_index(inplace=True,drop=True)

###Line_Items Cont.###
cf_add['net_inc_incl_non_cont_int'] = items['netincnci'] + items['netinc']
cf_add['oth_opr_cf'] = (items['ncfo']-(cf_add['net_inc_incl_non_cont_int']+items['depamor']+items['sbcomp']+cf_add['inc_curr_assets']+cf_add['inc_curr_liab']))
cf_add['oth_invst_cf'] = items['ncfi']-(items['ncfinv']+items['capex']+items['ncfbus'])
cf_add['oth_fin_cf'] = items['ncff']-(items['ncfdebt']+items['ncfcommon']+items['ncfdiv']) # Check for taxes paid on equity awards
cf_add['net_chng_cash'] = items['ncfo']+items['ncfi']+items['ncff']
cf_add['cash_year_begin'] = items['cashneq'].shift(1)
cf_add['cash_year_end'] = cf_add['net_chng_cash']+items['ncfx']+ cf_add['cash_year_begin']

# Additional IncS Line items to be calculated
is_add = pd.DataFrame()
is_add['calendardate'] = bs['calendardate']
is_add['othr_oper_exp'] = items['revenue']-items['cor']-items['sgna']-items['opinc']-items['depamor']
is_add['ebit_adj_for_extrord_items'] = items['ebit']-items['netincdis']
is_add['othr_inc/exp'] = is_add['ebit_adj_for_extrord_items']-items['opinc']
is_add['pretax_inc'] = items['ebit']-items['intexp']
is_add['inc_bfr_extrord_items'] = is_add['pretax_inc']-items['taxexp']-items['netincnci']
is_add['net_inc'] = is_add['inc_bfr_extrord_items']+items['netincdis']
is_add['retained'] = is_add['net_inc']+ items['ncfdiv']
is_add['commn_share_cal_eps_b'] = is_add['net_inc']/items['eps']
is_add['dil_share_cal_eps_b'] = is_add['net_inc']/items['epsdil']
is_add['ebitda'] = (items['revenue']-(items['cor']+items['sgna']+is_add['othr_oper_exp']))+is_add['othr_inc/exp']
is_add['ebit'] = is_add['ebitda']-items['depamor']
is_add['dps'] = items['ncfdiv']/is_add['dil_share_cal_eps_b'] # Add + sign


###Profit & loss historical ratios####

#Pre-requisite-(Reverse order of items & bs_add)
items.sort_values(by=['calendardate'], ascending=False, inplace=True)
items.reset_index(inplace=True, drop=True)
bs_add.sort_values(by=['calendardate'], ascending=False, inplace=True)
bs_add.reset_index(inplace=True, drop=True)
is_add.sort_values(by=['calendardate'], ascending=False, inplace=True)
is_add.reset_index(inplace=True, drop=True)
bs_extra.sort_values(by=['calendardate'], ascending=False, inplace=True)
bs_extra.reset_index(inplace=True, drop=True)

###Line_Items###
#Initially loaded in decending order, as per calendardate
pl_ratios = pd.DataFrame()
pl_ratios['calendardate'] = bs['calendardate']
pl_ratios.sort_values(by=['calendardate'], ascending=False,inplace=True)
pl_ratios.reset_index(inplace=True,drop=True)

pl_ratios['int_exp/avg_debt'] = None
for i in range(len(items.calendardate)-1):
    #print(i)
    pl_ratios['int_exp/avg_debt'].iloc[i] = (items.iloc[i,42]/((bs_add.iloc[i,7]+bs_add.iloc[i+1,7])/2))
    pl_ratios['int_exp/avg_debt'] = pl_ratios['int_exp/avg_debt'].fillna(0)

pl_ratios['dep/(net_asst+capx)'] = None
for i in range(len(items.calendardate)-1):
    pl_ratios['dep/(net_asst+capx)'].iloc[i] = (items.iloc[i,97]/(items.iloc[i+1,28]-items.iloc[i,96]))
    pl_ratios['dep/(net_asst+capx)'] = pl_ratios['dep/(net_asst+capx)'].fillna(0)

pl_ratios['sales_growth_yoy'] = None
for i in range(len(items.calendardate)-1):
    pl_ratios['sales_growth_yoy'].iloc[i] = (items.iloc[i,51]/items.iloc[i+1,51])-1
    pl_ratios['sales_growth_yoy'] = pl_ratios['sales_growth_yoy'].fillna(0)

###Reverse order of bs_add,is_add,items & pl_ratio before proceeding###
items.sort_values(by=['calendardate'], ascending=True,inplace=True)
items.reset_index(inplace=True,drop=True)
bs_add.sort_values(by=['calendardate'], ascending=True,inplace=True)
bs_add.reset_index(inplace=True,drop=True)
is_add.sort_values(by=['calendardate'], ascending=True,inplace=True)
is_add.reset_index(inplace=True,drop=True)
bs_extra.sort_values(by=['calendardate'], ascending=True,inplace=True)
bs_extra.reset_index(inplace=True,drop=True)
pl_ratios.sort_values(by=['calendardate'], ascending=True,inplace=True)
pl_ratios.reset_index(inplace=True,drop=True)

###Line_Items Cont.###
pl_ratios['cogs/sales%'] = (items['cor']/items['revenue'])
pl_ratios['sgna/sales%'] = (items['sgna']/items['revenue'])
pl_ratios['total_costs/sales%'] = pl_ratios['cogs/sales%'] + pl_ratios['sgna/sales%']
pl_ratios['othr_opr_exp/sales%'] = (is_add['othr_oper_exp']/items['revenue'])
pl_ratios['dep/gross_fix_asset%'] = items['depamor']/(bs_extra['ppegross'])
pl_ratios['inc_tax/pretax_inc'] = (items['taxexp']/is_add['pretax_inc'])
pl_ratios['min_int/(pretax_inc-tax)'] = items['netincnci']/(is_add['pretax_inc']-items['taxexp'])
pl_ratios['div/net_inc'] = items['ncfdiv']/is_add['net_inc']
pl_ratios['ebit_margin'] = items['ebit']/items['revenue']
pl_ratios['nominal_GDP_growth_yoy'] = growth_rates[:len(pl_ratios)]   #CHECK
#pl_ratios[6,'sales_growth/GDP'] = pl_ratios.iloc[6,12]/pl_ratios.iloc[6,13] ## Check


#Balance Sheet historical ratios
#Pre-requisite-(Reverse order of items & bs_add)
items.sort_values(by=['calendardate'], ascending=False, inplace=True)
items.reset_index(inplace=True, drop=True)
bs_add.sort_values(by=['calendardate'], ascending=False, inplace=True)
bs_add.reset_index(inplace=True, drop=True)
is_add.sort_values(by=['calendardate'], ascending=False, inplace=True)
is_add.reset_index(inplace=True, drop=True)
bs_extra.sort_values(by=['calendardate'], ascending=False, inplace=True)
bs_extra.reset_index(inplace=True, drop=True)
cf_add.sort_values(by=['calendardate'], ascending=False, inplace=True)
cf_add.reset_index(inplace=True, drop=True)

###Line_Items###
#Initially loaded in decending order, as per calendardate
bs_ratios = pd.DataFrame([])
bs_ratios['calendardate'] = bs['calendardate']
bs_ratios.sort_values(by=['calendardate'], ascending=False,inplace=True)
bs_ratios.reset_index(inplace=True,drop=True)

bs_ratios['PPE_G/asset(Prev Yr)'] = None
for i in range(len(items.calendardate)-1):
    bs_ratios['PPE_G/asset(Prev Yr)'].iloc[i] = int(float(bs_extra.iloc[i,2]))/items.iloc[i+1,6]
    bs_ratios['PPE_G/asset(Prev Yr)'] = bs_ratios['PPE_G/asset(Prev Yr)'].fillna(0)

bs_ratios['PPE_N/asset(Prev Yr)'] = None
for i in range(len(items.calendardate)-1):
    bs_ratios['PPE_N/asset(Prev Yr)'].iloc[i] = items.iloc[i,28]/items.iloc[i+1,6]
    bs_ratios['PPE_N/asset(Prev Yr)'] = bs_ratios['PPE_N/asset(Prev Yr)'].fillna(0)

###Reverse order of bs_add,is_add,items & pl_ratio before proceeding###
items.sort_values(by=['calendardate'], ascending=True,inplace=True)
items.reset_index(inplace=True,drop=True)
bs_add.sort_values(by=['calendardate'], ascending=True,inplace=True)
bs_add.reset_index(inplace=True,drop=True)
is_add.sort_values(by=['calendardate'], ascending=True,inplace=True)
is_add.reset_index(inplace=True,drop=True)
bs_extra.sort_values(by=['calendardate'], ascending=True,inplace=True)
bs_extra.reset_index(inplace=True,drop=True)
cf_add.sort_values(by=['calendardate'], ascending=True,inplace=True)
cf_add.reset_index(inplace=True,drop=True)
bs_ratios.sort_values(by=['calendardate'], ascending=True,inplace=True)
bs_ratios.reset_index(inplace=True,drop=True)

###Line_Items Cont.###
bs_ratios['receivables/sales'] = items['receivables']/items['revenue']
bs_ratios['inventory/sales'] = items['inventory']/items['revenue']
bs_ratios['invst_curr/sales'] = items['investmentsc']/items['revenue']
bs_ratios['othr_curr_asset/sales'] = bs_add['other_curr_assets']/items['revenue']
bs_ratios['oper_curr_asset/sales'] = items['assetsc']/items['revenue']
bs_ratios['annual_dep/PPE_N'] = items['depamor']/items['ppnenet']
bs_ratios['dividend_as_%_of_cash'] = items['ncfdiv']/(cf_add['net_chng_cash'] -items['ncfdiv'])
bs_ratios['othr_asset/sales'] = bs_add['other_assets']/items['revenue']
bs_ratios['payables/sales'] = items['payables']/items['revenue']
bs_ratios['othr_curr_liab/sales'] = bs_add['other_curr_liab']/items['revenue']
bs_ratios['oper_curr_liab/sales'] = bs_ratios['payables/sales']+bs_ratios['othr_curr_liab/sales']
bs_ratios['debt/equity'] = bs_add['debt']/items['equity']
bs_ratios['debt/tot_asset'] = bs_add['debt']/items['assets']
bs_ratios['othr_liab/sales'] = bs_add['other_liab']/items['revenue']
bs_ratios['debt_curr/assets'] = items['debtc']/items['assets']
bs_ratios['debt_non-curr/assets'] = bs_add['debt']/items['assets']
bs_ratios['deff_rev/sales'] = items['deferredrev']/items['revenue']
bs_ratios['deff_tax/sales'] = items['taxliabilities']/items['revenue']


fields = ['Sales growth', 'COGS/Sales', 'SG&A/Sales', 'Other operating exp/Sales', 'Depreciation/(Net assets+capex)',
          'Interest rate', 'Minority interest as % of PAT', 'Growth rate of total dividends','Tax rate',
          'Dividend as a % of cash generated','Receivables/Sales','Inventories/Sales','Investments Current/Sales',
          'Other Current Assets/Sales','PPE,Gross/Sales','Other Assets,annual growth 1yr','Total assets,4yr CAGR',
          'CAPEX','Accounts Payable/Sales','Other Current Liabilities/Sales','Short Term Debt/Assets',
          'Long Term Debt/Assets','Deffered Revenue / Sales','Deferred Taxes / Sales',
          'Other liabilities,annual growth 1yr','Total liabilities,4yr CAGR']


# Cost of Debt
cod =[]
cod = pd.DataFrame(columns=['cost_of_debt','values'])
cod.iloc[:,0] = ['curr_year_int_exp', 'curr_year_debt', 'prev_year_debt', 'avg_debt', 'final_value']
cod.iloc[0,1] = items.iloc[6, 42]
cod.iloc[1,1] = bs_add.iloc[6, 7]
cod.iloc[2,1] = bs_add.iloc[5, 7]
cod.iloc[3,1] = (int(cod.iloc[1, 1]) + int(cod.iloc[2, 1]))/2
cod.iloc[4,1] = cod.iloc[0, 1]/cod.iloc[3, 1]


# Equity Beta
# Calculate Return

sp500_price['return'] = None
for i in range(len(sp500_price.calendardate)-1):
    sp500_price['return'].iloc[i] = np.log(sp500_price.iloc[i+1, 1]/sp500_price.iloc[i, 1])

sp500_price['return'] = sp500_price['return'].shift(periods=1)

price_avg['return'] = None
for i in range(len(price_avg.calendardate)-1):
    price_avg['return'].iloc[i] = np.log(price_avg.iloc[i+1, 2]/price_avg.iloc[i, 2])

price_avg['return'] = price_avg['return'].shift(periods=1)

price_max['return'] = None
for i in range(len(price_max.calendardate)-1):
    price_max['return'].iloc[i] = np.log(price_max.iloc[i+1, 2]/price_max.iloc[i, 2])

price_max['return'] = price_max['return'].shift(periods=1)

#Calculate Mean
price_max['return'].dropna().mean()
price_avg['return'].dropna().mean()
sp500_price['return'].dropna().mean()

sp500_price['x-xmean'] = sp500_price['return']-sp500_price['return'].dropna().mean()
price_avg['x-xmean'] = price_avg['return']-price_avg['return'].dropna().mean()
price_max['x-xmean'] = price_max['return']-price_max['return'].dropna().mean()

price_new =pd.DataFrame()
price_new['covariance'] = sp500_price['x-xmean'] * price_avg['x-xmean']
price_new['variance'] = sp500_price['x-xmean']**2

x = np.sum(price_new['covariance'])
y = np.sum(price_new['variance'])

beta = x/y
intercept = price_avg['return'].dropna().mean() - beta * sp500_price['return'].dropna().mean()

# WACC
wacc =[]
wacc = pd.DataFrame(columns=['items','values'])
wacc.iloc[:,0] = ['shares outstanding','share price','equity value','net debt','cost of debt','tax rate',
                  'market risk free rate','expected market return']
wacc.iloc[0,1] = is_add.iloc[6,9]
#wacc.iloc[1,1] = stock_price.iloc[252,2] # FIX
wacc.iloc[2,1] = wacc.iloc[0,1]*wacc.iloc[1,1]
wacc.iloc[3,1] = bs_add.iloc[6,7]
wacc.iloc[4,1] = cod.iloc[4,1]
wacc.iloc[5,1] = np.average(pl_ratios['inc_tax/pretax_inc'])
wacc.iloc[6,1] = 0.0174 # Treasury bill rate
wacc.iloc[7,1] = 0.0813058854692394 # Expected market return

###ASSUMPTIONS###
assumptions = []
assumptions = pd.DataFrame(columns=['Assumptions%(Excluding CAPEX )','5 Year Avg','2021E','2022E','2023E','2024E','2025E','2026E'])
assumptions.iloc[:,0] = fields
assumptions.iloc[0,1] = np.average(pl_ratios['sales_growth_yoy'])
assumptions.iloc[1,1] = np.average(pl_ratios['cogs/sales%'])
assumptions.iloc[2,1] = np.average(pl_ratios['sgna/sales%'])
assumptions.iloc[3,1] = np.average(pl_ratios['othr_opr_exp/sales%'])
assumptions.iloc[4,1] = np.average(pl_ratios.iloc[1:7,10])
#assumptions.iloc[5,1] = round((np.average(pl_ratios['ebitda_margin']))*100)
#assumptions.iloc[6,1] = round((np.average(pl_ratios['ebit_margin']))*100)
assumptions.iloc[5,1] = np.average(pl_ratios.iloc[1:7,6])
assumptions.iloc[5,2] = cod.iloc[4,1]
assumptions.iloc[6,1] = pl_ratios.iloc[6,8]
assumptions.iloc[7,1] = (((is_add.iloc[6,12]/is_add.iloc[2,12])**(1/4))-1)
assumptions.iloc[8,1] = np.average(pl_ratios['inc_tax/pretax_inc'])
assumptions.iloc[9,1] = np.average(bs_ratios['dividend_as_%_of_cash'])
assumptions.iloc[10,1] = np.average(bs_ratios['receivables/sales'])
assumptions.iloc[11,1] = np.average(bs_ratios['inventory/sales'])
assumptions.iloc[12,1] = np.average(bs_ratios['invst_curr/sales'])
assumptions.iloc[13,1] = np.average(bs_ratios['othr_curr_asset/sales'])
assumptions.iloc[14,1] = np.average(bs_ratios.iloc[1:7, 6])
assumptions.iloc[15,1] = (bs_add.iloc[6,5]/bs_add.iloc[5,5])-1
assumptions.iloc[16,1] = (((items.iloc[6,6]/items.iloc[2,6])**(1/4))-1)
assumptions.iloc[17,1] = (-np.average(items['capex']))
assumptions.iloc[18,1] = np.average(bs_ratios['payables/sales'])
assumptions.iloc[19,1] = np.average(bs_ratios['othr_curr_liab/sales'])
assumptions.iloc[20,1] = np.average(bs_ratios['debt_curr/assets'])
assumptions.iloc[21,1] = np.average(bs_ratios['debt_non-curr/assets'])
assumptions.iloc[22,1] = np.average(bs_ratios['deff_rev/sales'])
assumptions.iloc[23,1] = np.average(bs_ratios['deff_tax/sales'])
assumptions.iloc[24,1] = (bs_add.iloc[6,8]/bs_add.iloc[5,8])-1
assumptions.iloc[25,1] = (((items.iloc[6,24]/items.iloc[2,24])**(1/4))-1)

for i in range(len(assumptions)):
    if i != 5:
        assumptions.iloc[i, 2:8] = assumptions.iloc[i, 1]
assumptions.iloc[5, 3:8] = assumptions.iloc[5, 2]

for i in range(len(assumptions)):
    if i != 17:
        assumptions.iloc[i, 1:] = assumptions.iloc[i, 1:] * 100

assumptions.iloc[:, 1:] = assumptions.iloc[:, 1:].applymap(lambda x: round(x, 2))

#Time For Final Completion
seconds = time.time() - start_time
print('Time Taken for Final Completion:', time.strftime("%H:%M:%S",time.gmtime(seconds)))
print('Selected Company Ticker:',tick)
